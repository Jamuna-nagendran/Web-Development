{"version":3,"sources":["js/index.js"],"names":["allEmployees","document","querySelector","taskForce","employeeCards","querySelectorAll","top","left","getBoundingClientRect","createPanel","x","y","name","createElement","setAttribute","innerText","style","removeInfoPanel","remove","addEventListener","evt","preventDefault","target","getAttribute","infoPanel","clientX","clientY","append","forEach","el","getId","dataTransfer","setData","currentTarget","classList","add","empId","getData"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMA,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,gBAAgB,CAAC;AAC7D,MAAMC,SAAS,GAAGF,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC;AACvD,MAAME,aAAa,GAAGH,QAAQ,CAACI,gBAAgB,CAAC,WAAW,CAAC;AAC5D,MAAM;EAAEC,GAAG;EAAEC;AAAK,CAAC,GAAGP,YAAY,CAACQ,qBAAqB,CAAC,CAAC;AAE1D,MAAMC,WAAW,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAEC,IAAI,KAAK;EAClC,MAAMH,WAAW,GAAGR,QAAQ,CAACY,aAAa,CAAC,KAAK,CAAC;EACjDJ,WAAW,CAACK,YAAY,CAAC,OAAO,EAAE,YAAY,CAAC;EAC/CL,WAAW,CAACM,SAAS,GAAGH,IAAI;EAC5BH,WAAW,CAACO,KAAK,CAACV,GAAG,GAAI,GAAEK,CAAE,IAAG;EAChCF,WAAW,CAACO,KAAK,CAACT,IAAI,GAAI,GAAEG,CAAE,IAAG;EACjC,OAAOD,WAAW;AACpB,CAAC;AAED,MAAMQ,eAAe,GAAGA,CAAA,KAAMhB,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC,EAAEgB,MAAM,CAAC,CAAC;AAE7ElB,YAAY,CAACmB,gBAAgB,CAAC,aAAa,EAAE,UAAUC,GAAG,EAAE;EAC1DA,GAAG,CAACC,cAAc,CAAC,CAAC;EACpBJ,eAAe,CAAC,CAAC;EACjB,IAAIG,GAAG,CAACE,MAAM,CAACC,YAAY,CAAC,OAAO,CAAC,KAAK,UAAU,EAAE;IACnD,MAAMX,IAAI,GAAGQ,GAAG,CAACE,MAAM,CAACC,YAAY,CAAC,WAAW,CAAC;IACjD,MAAMC,SAAS,GAAGf,WAAW,CAACW,GAAG,CAACK,OAAO,GAAGlB,IAAI,EAAEa,GAAG,CAACM,OAAO,GAAGpB,GAAG,EAAEM,IAAI,CAAC;IAE1EZ,YAAY,CAAC2B,MAAM,CAACH,SAAS,CAAC;EAChC;AACF,CAAC,CAAC;AAEFxB,YAAY,CAACmB,gBAAgB,CAAC,OAAO,EAAE,MAAMF,eAAe,CAAC,CAAC,CAAC;;AAE/D;AACA;AACA;AACA;AACA;;AAEAb,aAAa,CAACwB,OAAO,CAAEC,EAAE,IAAI;EAC3BA,EAAE,CAACV,gBAAgB,CAAC,WAAW,EAAE,UAASC,GAAG,EAAC;IAC1C;IACAH,eAAe,CAAC,CAAC;IACjB,MAAMa,KAAK,GAAGV,GAAG,CAACE,MAAM,CAACC,YAAY,CAAC,SAAS,CAAC;IAChD;IACAH,GAAG,CAACW,YAAY,CAACC,OAAO,CAAC,YAAY,EAACF,KAAK,CAAC;EAChD,CAAC,CAAC;AACJ,CAAC,CAAC;AAGF3B,SAAS,CAACgB,gBAAgB,CAAC,WAAW,EAAC,UAASC,GAAG,EAAC;EAClDA,GAAG,CAACC,cAAc,CAAC,CAAC;EACpB;EACA;EACA;EACAD,GAAG,CAACa,aAAa,CAACC,SAAS,CAACC,GAAG,CAAC,gBAAgB,CAAC;AAEnD,CAAC,CAAC;;AAEA;AACAhC,SAAS,CAACgB,gBAAgB,CAAC,WAAW,EAAC,UAASC,GAAG,EAAC;EAClDA,GAAG,CAACC,cAAc,CAAC,CAAC;EACpBD,GAAG,CAACa,aAAa,CAACC,SAAS,CAAChB,MAAM,CAAC,gBAAgB,CAAC;AACtD,CAAC,CAAC;AAEFf,SAAS,CAACgB,gBAAgB,CAAC,MAAM,EAAE,UAASC,GAAG,EAAC;EAC9CA,GAAG,CAACC,cAAc,CAAC,CAAC;EACpB,MAAMe,KAAK,GAAGhB,GAAG,CAACW,YAAY,CAACM,OAAO,CAAC,YAAY,CAAC;EACpDjB,GAAG,CAACa,aAAa,CAACN,MAAM,CAAC1B,QAAQ,CAACC,aAAa,CAAE,gBAAekC,KAAM,IAAG,CAAC,CAAC;EAC3EhB,GAAG,CAACa,aAAa,CAACC,SAAS,CAAChB,MAAM,CAAC,gBAAgB,CAAC;AACtD,CAAC,CAAC;AAEFf,SAAS,CAACgB,gBAAgB,CAAC,UAAU,EAAC,UAASC,GAAG,EAAC;EAC/CA,GAAG,CAACC,cAAc,CAAC,CAAC;AACxB,CAAC,CAAC","file":"js.00a46daa.js","sourceRoot":"..\\src","sourcesContent":["/* Drag and Drop \n-> we use the drag and drop api\nSteps the implement drag and drop\n1. Designate an element as draggable by setting draggable as 'true;\n2. Designate an area as a drop zone by attaching suitable event listeners\n3. Store and transfer data specific to the dragged item using the data transfer object\n4. When the element is dragged and dropped on the drop zone, the data stored is transferred\n5. Use the transferred data to implement visual changes to the elements \n\ndragstart => when the user starts to drag an item \ndrag => when the item is being dragged\ndragenter => when the item enter the drop zone \ndragover => when the item is dragged over the drop zone\ndrop => when the item is dropped over the drop zone\ndragleave => when the item being dragged leaves the drop zone without getting dropped\ndragend -> when the dragging ends\n*/\n\n\nconst allEmployees = document.querySelector('.all-employees');\nconst taskForce = document.querySelector('.task-force');\nconst employeeCards = document.querySelectorAll('.employee');\nconst { top, left } = allEmployees.getBoundingClientRect();\n\nconst createPanel = (x, y, name) => {\n  const createPanel = document.createElement('div');\n  createPanel.setAttribute('class', 'info-panel');\n  createPanel.innerText = name;\n  createPanel.style.top = `${y}px`;\n  createPanel.style.left = `${x}px`;\n  return createPanel;\n};\n\nconst removeInfoPanel = () => document.querySelector('.info-panel')?.remove();\n\nallEmployees.addEventListener('contextmenu', function (evt) {\n  evt.preventDefault();\n  removeInfoPanel();\n  if (evt.target.getAttribute('class') === 'employee') {\n    const name = evt.target.getAttribute('data-name');\n    const infoPanel = createPanel(evt.clientX - left, evt.clientY - top, name);\n\n    allEmployees.append(infoPanel);\n  }\n});\n\nallEmployees.addEventListener('click', () => removeInfoPanel());\n\n// drag and drop \n// The moment one starts to drag any of these employee cards we want to fetch their unique data id value from the data attribute\n// And we want store that value using the data transfer object\n//This should happen one starts to drag these elements, hence we have to use the dragstart event\n//We need add a dragstart event on all the employee cards\n\nemployeeCards.forEach((el) =>{\n  el.addEventListener('dragstart', function(evt){\n      //Remove any name panels that might be on display at the time that the darg begins\n      removeInfoPanel();\n      const getId = evt.target.getAttribute('data-id');\n      //Allows you to store data to be transferred\n      evt.dataTransfer.setData('text/plain',getId);\n  });\n});\n\n\ntaskForce.addEventListener('dragenter',function(evt){\n  evt.preventDefault();\n  //Next we need to add a visual effect to indicate the area as a drop zone\n  //This can be done by changing the border attribute\n  //We evt.target is the div under the mouse pointer, whereas the currentTarget is the element on which this event is attached this will change as we drag about\n  evt.currentTarget.classList.add('highlight-drop');\n\n});\n\n  //When we move a employee to the drop zone the change in border stays, but this should not happen\n  taskForce.addEventListener('dragleave',function(evt){\n    evt.preventDefault();\n    evt.currentTarget.classList.remove('highlight-drop');\n  });\n\n  taskForce.addEventListener('drop', function(evt){\n    evt.preventDefault();\n    const empId = evt.dataTransfer.getData('text/plain');\n    evt.currentTarget.append(document.querySelector(`div[data-id='${empId}']`));\n    evt.currentTarget.classList.remove('highlight-drop');\n  });\n\n  taskForce.addEventListener('dragover',function(evt){\n      evt.preventDefault();\n  });\n\n"]}